<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./Readme_files/filelist.xml">
<title>README file for the NEV File Toolbox</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Edwin Maynard</o:Author>
  <o:LastAuthor>Edwin Maynard</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>220</o:TotalTime>
  <o:LastPrinted>2000-09-16T14:39:00Z</o:LastPrinted>
  <o:Created>2000-10-04T17:11:00Z</o:Created>
  <o:LastSaved>2000-10-04T17:11:00Z</o:LastSaved>
  <o:Pages>6</o:Pages>
  <o:Words>2065</o:Words>
  <o:Characters>11774</o:Characters>
  <o:Company>Personal</o:Company>
  <o:Lines>98</o:Lines>
  <o:Paragraphs>23</o:Paragraphs>
  <o:CharactersWithSpaces>14459</o:CharactersWithSpaces>
  <o:Version>9.3821</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:"MS Mincho";
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-alt:"\FF2D\FF33 \660E\671D";
	mso-font-charset:128;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:1 134676480 16 0 131072 0;}
@font-face
	{font-family:"\@MS Mincho";
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:128;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:1 134676480 16 0 131072 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";}
p.Example, li.Example, div.Example
	{mso-style-name:Example;
	mso-style-parent:"Plain Text";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.25in;
	margin-bottom:.0001pt;
	text-indent:.5in;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"MS Mincho";}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 65.95pt 1.0in 65.95pt;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>
</head>

<body lang=EN-US style='tab-interval:.5in'>

<div class=Section1>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>README
file for the NEV File Toolbox.<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>Version
1.0<span style="mso-spacerun: yes">   </span>(R11.1) Last Revised: 4-Oct-00<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>This
file explains how to install and use Bionic Technologies, Inc. NEV File Toolbox
for Matlab ver. 1.0. This toolbox was developed and tested under Matlab R11.1
and with NEV files following specification 2.0 or later.<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoPlainText><b><u><span style='mso-fareast-font-family:"MS Mincho"'>INSTALLATION<o:p></o:p></span></u></b></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>The NEV
File Toolbox uses the class features of Matlab to simplify the user's
perception of the structure of a NEV file. To install this toolbox make sure
that the 'nevfiles' directory is in the Matlab path. This can be done by adding
the directory to the path with the Path tool. The 'nevfiles' directory contains
a single sub-directory: '@nev'. Once the directory has been added to the path,
all of the NEV functionality can be accessed from the Matlab command line.<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoPlainText><b><u><span style='mso-fareast-font-family:"MS Mincho"'>USER'S
GUIDE<o:p></o:p></span></u></b></p>

<p class=MsoPlainText><b><u><span style='mso-fareast-font-family:"MS Mincho"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></u></b></p>

<p class=MsoPlainText><b><u><span style='mso-fareast-font-family:"MS Mincho"'>Conventions<o:p></o:p></span></u></b></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>Conventions
in this document are as follows. Names of commands entered at the command line
are indicated by enclosing the string in single quotes. Structure fields are
indicated by prepending a period (.) before the field name. Optional values in
the command line are separated with the '/' character or enclosed in brackets
'[]'. A NEV object is the resulting variable created with the 'opennev'
command. Although structure field names are case-sensitive, the function names
are not.<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>1)
GETTING STARTED (<b>openNEV, closeNEV</b>)<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.25in'><span style='mso-fareast-font-family:
"MS Mincho"'>The first step to using the NEV File Toolbox is to open a NEV file
with the 'openNEV' command.<o:p></o:p></span></p>

<p class=Example>Syntax: A = openNEV(filename/NEV object);</p>

<p class=Example>Example: nev = openNEV('mynev.nev');</p>

<p class=MsoPlainText style='margin-left:.25in'><span style='mso-fareast-font-family:
"MS Mincho"'>This creates a NEV object that can be used to access the NEV file.
It is important to use this function to open the file since all subsequent
commands rely heavily on information in this structure to properly access the
file. The structure of the nev object is:<o:p></o:p></span></p>

<p class=MsoPlainText style='text-indent:.5in'><span style='mso-fareast-font-family:
"MS Mincho"'>nevObject<o:p></o:p></span></p>

<p class=Example style='margin-left:81.0pt;text-indent:-.25in'>|-.FileInfo
-&gt; additional information about the NEV file</p>

<p class=Example style='margin-left:81.0pt;text-indent:-.25in'><span
style='mso-tab-count:1'>   </span>|-.source -&gt; file path and name for the
open NEV file</p>

<p class=Example style='margin-left:81.0pt;text-indent:-.25in'><span
style='mso-tab-count:1'>   </span>|-.packetCount -&gt; number of packets in the
NEV file</p>

<p class=Example style='margin-left:81.0pt;text-indent:-.25in'><span
style='mso-tab-count:1'>   </span>|-.fid -&gt; Matlab file pointer to the open
NEV file</p>

<p class=Example style='margin-left:81.0pt;text-indent:-.25in'><span
style='mso-tab-count:1'>   </span>|-.bytesPerWaveformSample -&gt; number of
bytes per waveform sample</p>

<p class=Example style='margin-left:81.0pt;text-indent:-.25in'>|-.HeaderBasic
-&gt; basic information about the NEV file</p>

<p class=Example style='margin-left:81.0pt;text-indent:-.25in'><span
style='mso-tab-count:1'>   </span>(see documentation on NEV file for
information of fields)</p>

<p class=Example style='margin-left:81.0pt;text-indent:-.25in'>|-.HeaderExtended
-&gt; information about each electrode in the NEV file</p>

<p class=Example style='margin-left:81.0pt;text-indent:-.25in'><span
style='mso-tab-count:1'>   </span>(see documentation on NEV file for
information of fields)</p>

<p class=Example style='margin-left:81.0pt;text-indent:-.25in'>|-.SpikeData
-&gt; basic information about spike packets (this is filled by the
'getNEVSpikes' function but user may store data here)</p>

<p class=Example style='margin-left:81.0pt;text-indent:-.25in'>|-.StimulusData
-&gt; basic information about stimulus packets (this is filled by the
'getNEVstimulus' function but user may store data)</p>

<p class=MsoPlainText style='margin-left:.25in'><span style='mso-fareast-font-family:
"MS Mincho"'>To save work between sessions (e.g. when classifying spikes), save
the NEV object as you would any other Matlab variable. When starting the next
work session, call the openNEV function with the saved NEV object as the
parameter. This function will restore access to the original NEV file without
needing to reload the other information from the file.<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>2)
ACCESSING THE NEV FILE (<b>getpackets, getNEVSpikes, getNEVStimulus</b>)<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.25in'><span style='mso-fareast-font-family:
"MS Mincho"'>Accesses to the NEV file consist of retrieving packets from the
file or searching for packets in the file that satisfy certain criteria. To
retrieve a specific packet or packets from the file, use the 'getPackets'
command.<o:p></o:p></span></p>

<p class=Example>Syntax: A = getPackets(nevObject, indices, [field]);</p>

<p class=Example>Example: packets = getPackets(nev, [1 10 100 1000], 'electrode');</p>

<p class=MsoPlainText style='margin-left:.25in'><span style='mso-fareast-font-family:
"MS Mincho"'>If 'field' is not specified, the function returns a cell array
structures with each cell representing a single packet from the NEV file. Cells
containing packets from spikes have the following structure:<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.5in'><span style='mso-fareast-font-family:
"MS Mincho"'>packet.timestamp  is the time stamp for when the event occurred<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.5in'><span style='mso-fareast-font-family:
"MS Mincho"'>packet.electrode  is the number of the electrode where the event
occurred<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.5in'><span style='mso-fareast-font-family:
"MS Mincho"'>packet.unit  is the unit number<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.5in'><span style='mso-fareast-font-family:
"MS Mincho"'>packet.waveform  holds the UNSCALED waveform<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.25in'><span style='mso-fareast-font-family:
"MS Mincho"'>For stimulus packets, the structure is:<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.5in'><span style='mso-fareast-font-family:
"MS Mincho"'>packet.timestamp  value indicating the time of the packet<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.5in'><span style='mso-fareast-font-family:
"MS Mincho"'>packet.bitFlag  indicates why packet occurred<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.5in'><span style='mso-fareast-font-family:
"MS Mincho"'>packet.dio  value of the parallel port<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.5in'><span style='mso-fareast-font-family:
"MS Mincho"'>packet.analog  1x5 array of values of analog channels (in mV)<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.25in'><span style='mso-fareast-font-family:
"MS Mincho"'>If the 'field' parameter is specified, then the return value is
the desired packet field. In the case of waveform data, the returned value is a
matrix with each row being a packet and each column being a waveform sample.<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.25in'><span style='mso-fareast-font-family:
"MS Mincho"'>The entire NEV file can be scanned in a more efficient manner to
load in basic information about the packet contents. This greatly facilitates
future searches because most of the important search parameters are kept in
memory. The two functions that perform this are 'getNEVSpikes' and
'getNEVStimulus'. These functions place their output in the 'SpikeData' and
'StimulusData' fields of the NEV object, respectively. Information retained
about spikes consists of the index in the NEV file, the time stamp, the
electrode, and the unit number. Information retained about the stimulus
consists of the index, time stamp, trigger information, dio value, and the
analog channel values. These fields can be erased in the NEV object to conserve
memory. CAUTION: This will take a long time (approximately 1 Mb/ sec. On PII
450) with large files and will require significant memory. If Matlab runs out
of memory trying to perform this operation, you can use 'searchNEVByField' to
find packets in the NEV file.<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.25in'><span style='mso-fareast-font-family:
"MS Mincho"'>Further information about the fields in the packets can be found
in the documentation of the NEV file format provided by Bionic Technologies, Inc.<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>3)
SEARCHING THE NEV FILE (<b>searchNEVByField, searchNEVByTime</b>)<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>Two
functions are provided for scanning the NEV file to find packets that satisfy
specific selection criteria.<o:p></o:p></span></p>

<p class=MsoPlainText><b><span style='mso-fareast-font-family:"MS Mincho"'>searchNEVByField<o:p></o:p></span></b></p>

<p class=MsoPlainText style='margin-left:81.0pt;text-indent:-63.0pt'><span
style='mso-fareast-font-family:"MS Mincho"'>Syntax: A =
searchNEVByField(nevObject, 'criteria', [start index], [stop index]);<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:81.0pt;text-indent:-63.0pt'><span
style='mso-fareast-font-family:"MS Mincho"'>Example 1: electrode1 =
searchNEVByField(nev, 'electrode == 1', 1, 1000);<o:p></o:p></span></p>

<p class=MsoPlainText><b><span style='mso-fareast-font-family:"MS Mincho"'>searchNEVByTime<o:p></o:p></span></b></p>

<p class=MsoPlainText style='margin-left:81.0pt;text-indent:-63.0pt'><span
style='mso-fareast-font-family:"MS Mincho"'>Syntax: A =
searchNEVByTime(nevObject, time (in seconds));<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:81.0pt;text-indent:-63.0pt'><span
style='mso-fareast-font-family:"MS Mincho"'>Example 1: intervalStart =
searchNEVByTime(nev, 10.0);<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.25in'><span style='mso-fareast-font-family:
"MS Mincho"'>This function scans all of the packets in the NEV file on disk to
determine whether that packet fits the specified criteria. The extent of the
search can be controlled by the optional parameters 'start' and 'stop' which
define the starting index of the search and the stopping index of the search.
The criteria specified in 'criteria' is any Matlab evaluatable logical
expression (i.e. one that results in 1's or 0's upon evaluation, e.g. electrode
&gt; 1 &amp; unit == 0). If the field is not present in a packet, the result
for that packet is false (0). Some examples of legal search criteria:<o:p></o:p></span></p>

<p class=Example>Example: A = searchNEV(nev, 'electrode == 1');</p>

<p class=Example>Example: A = searchNEV(nev, 'dio ~= 0');</p>

<p class=Example>Example: A = searchNEV(nev, 'ismember(electrode, [1 3]'));</p>

<p class=Example>Example: A = searchNEV(nev, 'electrode == 5 &amp; waveform(4)
&lt; -100');</p>

<p class=MsoPlainText style='margin-left:.25in'><span style='mso-fareast-font-family:
"MS Mincho"'>This operation returns two variables, a list of 1's and 0's
indicating whether the packet fit the criteria and a list of indices searched.
IMPORTANT NOTE: when searching time stamps using the 'searchNEVByField'
function, time is in ticks  NOT seconds.<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.25in'>To find the index in the NEV
file where a certain time falls, use the 'searchNEVByTime' function. This uses
a significantly more efficient algorithm to search the NEV file than the one
used by 'searchNEVByField'. Time is given in seconds and the return value is an
index that can be used as a parameter to the other functions. If the index is
fractional, the time falls between two adjacent packets, a value of ±infinity
indicates that the time falls outside of the range of times in the NEV file.</p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>4)
SAVING CHANGES<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>A
single function is provided to change the contents of the NEV file.<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.25in'><span style='mso-fareast-font-family:
"MS Mincho"'>_putPackets_<o:p></o:p></span></p>

<p class=Example>Syntax: A = putPackets(nevObject, indices, 'field', data);</p>

<p class=Example>Example 1: A = putPackets(nev, 1, 'unit', 0);</p>

<p class=Example>Example 2: A = putPackets(nev, [1 2], 'unit', [0 1]);</p>

<p class=MsoPlainText style='margin-left:.25in'>This function replaces the data
in the NEV file on the disk with updated information. Currently, this function
only supports writes to the 'electrode' and 'unit' fields of spike packets to
facilitate unit classification. The data field is either a single value or a
list of values the same length as the index list. In the first case, each
packet gets the same value, in the second case, each packet gets the
corresponding value.</p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>5)
FINISHING UP<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>The
function _closeNEV_ should be called to properly close the NEV file and flush
the write buffer.<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>6)
ACCESSING THE NEV OBJECT<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>Once a
NEV object has been created using the 'opennev' function, information about the
file can be found in the returned NEV structure object. Generally speaking,
access to the structure fields is accomplished using normal structure
operations. A summary of the different type of accesses to the nev object are:<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>.FileInfo
 this structure holds other miscellaneous information about the NEV file
calculated at the time the file is opened with 'opennev'. Access the nested
fields with normal Matlab commands.<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>.HeaderBasic
 this is a structure containing basic information about the NEV file. Access
the subfields with normal Matlab commands to access nested structure fields.<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>.HeaderExtended
 this is a cell array containing structures which contain information about
the configuration of the individual channels and the experimental data set up.
Accessing information from this field is done by:<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><span
style='mso-fareast-font-family:"MS Mincho"'>A.HeaderExtended  returns a cell
array of structures for all of the extended headers<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><span
style='mso-fareast-font-family:"MS Mincho"'>A.HeaderExtended{1}  returns a
structure containing the specified extended header<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><span
style='mso-fareast-font-family:"MS Mincho"'>A.HeaderExtended{1:3}  returns a
cell array of structures containing the selected extended headers.<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><span
style='mso-fareast-font-family:"MS Mincho"'>A.HeaderExtended.electrode 
returns an array of values. If the particular extended header does not have the
field, the value of NAN is returned for that extended header.<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><span
style='mso-fareast-font-family:"MS Mincho"'>A.HeaderExtended{1:2}.electrode <b>OR</b>
A.HeaderExtended.electrode(1:2)  returns an array of values from the selected
cells. Both constructs return the same value. If the particular extended header
does not have the field, the value of NAN is returned for that extended header.<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>.SpikeData
 this field contains basic information for spike packets. It can be set using
the 'getNEVSpikes' command or user information can be placed there. Supported
accesses to this information are:<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><span
style='mso-fareast-font-family:"MS Mincho"'>A.SpikeData  returns a structure
with fields index, timestamp, electrode, and unit<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><span
style='mso-fareast-font-family:"MS Mincho"'>A.SpikeData(1)  returns a
structure with information about the indicated packet<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><span
style='mso-fareast-font-family:"MS Mincho"'>A.SpikeData(1:5)  returns an array
of structures with each element representing a single spike packet in the
original NEV file.<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><span
style='mso-fareast-font-family:"MS Mincho"'>A.SpikeData.electrode  returns an
array of values with the electrode value for all spike packets<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><span
style='mso-fareast-font-family:"MS Mincho"'>A.SpikeData.electrode(1:5) <b>OR </b>A.SpikeData(1:5).electrode
 returns a subset of the electrode values for the spike packets.<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>.StimulusData
 this field contains all the information about the stimulus packets in a NEV
file. It can be set using the 'getNEVStimulus' command or user information can
be placed there. Supported accesses to this information are:<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><span
style='mso-fareast-font-family:"MS Mincho"'>A.StimulusData  returns a
structure with fields index, timestamp, trigger, dio, analog.<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><span
style='mso-fareast-font-family:"MS Mincho"'>A.StimulusData(1)  returns a
structure with information about the indicated packet<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><span
style='mso-fareast-font-family:"MS Mincho"'>A.StimulusData(1:5)  returns a
structure array with each element being a stimulus packet in the NEV file.<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><span
style='mso-fareast-font-family:"MS Mincho"'>A.StimulusData.dio  returns an
array of values of the dio value for all stimulus packets<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><span
style='mso-fareast-font-family:"MS Mincho"'>A.StimulusData.analog  returns an
Nx5 matrix of the analog channel values (in mV) for all stimulus packets<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><span
style='mso-fareast-font-family:"MS Mincho"'>A.StimulusData.analog(:,1) 
returns an Nx1 array of the analog channel values (in mV) for the specified
channel (1-5).<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><span
style='mso-fareast-font-family:"MS Mincho"'>A.StimulusData.dio(1:5) <b>OR </b>A.StimulusData(1:5).dio
 returns a subset of the dio values for the stimulus packets.<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><span
style='mso-fareast-font-family:"MS Mincho"'>A.StimulusData(1:5).analog <b>OR</b>
A.StimulusData.analog(1:5, :)  returns a subset of all the analog values for
the stimulus packets.<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><span
style='mso-fareast-font-family:"MS Mincho"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>7)
ASSIGNING TO THE NEV OBJECT<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>Once a
NEV object has been created using the 'opennev' function, information about the
file can be modified in the returned NEV structure object. Generally speaking,
access to the structure fields is accomplished using normal structure
operations. A summary of the different type of assignments to the various
fields of the nev object are:<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>.FileInfo
 <b><i>In general, do not change information in these fields as they may
disrupt proper working of the NEV class.</i></b><o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><b><span
style='mso-fareast-font-family:"MS Mincho"'>Syntax: </span></b><span
style='mso-fareast-font-family:"MS Mincho"'>nevObject.FileInfo.field([range]) =
value<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><b><span
style='mso-fareast-font-family:"MS Mincho"'>Example: </span></b><span
style='mso-fareast-font-family:"MS Mincho"'>nevObject.FileInfo.source =
'D:\EXPERIMENT\EXPERIMENT001.NEV';<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>.HeaderBasic
<b><i>In general, do not change information in these fields as they may disrupt
proper working of the NEV class.</i></b><o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><b><span
style='mso-fareast-font-family:"MS Mincho"'>Syntax: </span></b><span
style='mso-fareast-font-family:"MS Mincho"'>nevObject.HeaderBasic.field([range])
= value<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><b><span
style='mso-fareast-font-family:"MS Mincho"'>Example: </span></b><span
style='mso-fareast-font-family:"MS Mincho"'>nevObject.HeaderBasic.comment =
'Good experiment';<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>.HeaderExtended
 <b><i>In general, do not change information in these fields as they may
disrupt proper working of the NEV class.</i></b><o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><b><span
style='mso-fareast-font-family:"MS Mincho"'>Syntax: </span></b><span
style='mso-fareast-font-family:"MS Mincho"'>nevObject.HeaderExtended.field([range])
= value(s)<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><b><span
style='mso-fareast-font-family:"MS Mincho"'>Example: </span></b><span
style='mso-fareast-font-family:"MS Mincho"'>nevObject.HeaderExtended.scale(1:2)
= [200 200];<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>.SpikeData
 modify information relating to spike packets. Field must filled by the
'getNEVspikes' command in order to function.<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><b><span
style='mso-fareast-font-family:"MS Mincho"'>Syntax: </span></b><span
style='mso-fareast-font-family:"MS Mincho"'>nevObject.SpikeData.field([range])
= value(s)<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><b><span
style='mso-fareast-font-family:"MS Mincho"'>Example: </span></b><span
style='mso-fareast-font-family:"MS Mincho"'>nevObject.SpikeData.unit(1:100) =
1;<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><span
style='mso-fareast-font-family:"MS Mincho"'>To delete packets use:<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><b><span
style='mso-fareast-font-family:"MS Mincho"'>Syntax: </span></b><span
style='mso-fareast-font-family:"MS Mincho"'>nevObject.SpikeData([range]) = [];<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><b><span
style='mso-fareast-font-family:"MS Mincho"'>Example: </span></b><span
style='mso-fareast-font-family:"MS Mincho"'>nevObject.SpikeData(1:100) = [];<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>.StimulusData
 modify information relating to stimulus packets. Field must filled by the
'getNEVstimulus' command in order to function.<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><b><span
style='mso-fareast-font-family:"MS Mincho"'>Syntax: </span></b><span
style='mso-fareast-font-family:"MS Mincho"'>nevObject.StimulusData.field([range])
= value(s)<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><b><span
style='mso-fareast-font-family:"MS Mincho"'>Example: </span></b><span
style='mso-fareast-font-family:"MS Mincho"'>nevObject.StimulusData.dio(1:2) =
128;<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><span
style='mso-fareast-font-family:"MS Mincho"'>To delete packets use:<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><b><span
style='mso-fareast-font-family:"MS Mincho"'>Syntax: </span></b><span
style='mso-fareast-font-family:"MS Mincho"'>nevObject.StimulusData([range]) =
[];<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.75in;text-indent:-.5in'><b><span
style='mso-fareast-font-family:"MS Mincho"'>Example: </span></b><span
style='mso-fareast-font-family:"MS Mincho"'>nevObject.StimulusData(1:100) = [];<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>8)
OTHER UTILITY FUNCTIONS<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>Two
functions are provided to assist in accessing the last elements in the
SpikeData and StimulusData fields. The functions are:<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.25in'><span style='mso-fareast-font-family:
"MS Mincho"'>_<b>lastSpike</b>_<o:p></o:p></span></p>

<p class=Example>Syntax: lastSpike(nevObject)</p>

<p class=Example>Example: A = nev.SpikeData(lastSpike(nev)); Gets last spike
packet _<b>lastStim</b>_</p>

<p class=Example>Syntax: lastStim(nevObject)</p>

<p class=Example>Example: A = nev.StimulusData(lastStim(nev)); Gets last
stimulus packet</p>

<p class=Example style='margin-left:0in;text-indent:0in'>-------------------------------------------------------------------------</p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>Update
information for NEV File Toolbox Version 1.0<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>This
toolbox was developed and tested under Matlab 5.3 (R11.1), its functionality
under earlier versions of Matlab has not been evaluated. Please contact Bionic
Technologies, Inc through www.bionictech.com with bug reports or enhancement
suggestions.<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>Copyright
(c) 2000 by Bionic Technologies, Inc.<o:p></o:p></span></p>

<p class=MsoPlainText><span style='mso-fareast-font-family:"MS Mincho"'>$Revision:
1.0 $<span style="mso-spacerun: yes">  </span>$Date: 9/16/00 1:09:48 PM$<o:p></o:p></span></p>

</div>

</body>

</html>
