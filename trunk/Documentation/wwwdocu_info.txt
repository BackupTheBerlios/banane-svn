The Banane WWW Documentation

$Id: $




GENERAL
The banane www documentation is based on the information about each
routine that the developer includes in the header of the routine's
MATLAB source file. After comitting a change in a routine, this
routine's header information is 
parsed by a Perl program and transferred into a mySQL database table. The
actual website is dynamically generated by a group of PHP routines that
obtain their information from this mySQL database. Thus, the routines
in the Documentation directory are either Perl scripts that accomplish
the parsing and transfer of the header information into the database,
or PHP scripts that extract the information from the database and
display it on a webpage.

The documentation routines are themselves part of the banane
repository. Thus, their changes and updates are also controlled by
SVN, like those of the banane MATLAB routines. To enable the display of
the documentation on a website, a working copy of 
the banane repository has to be placed on the webserver. The
documentation routines within this working copy can then be executed by
the server and the header
information is also extracted from the MATLAB routines within this working
copy.  

All documentation routines need the variable BANANEPATH
to be set to the appropriate value. Presently, this is
BANANEPATH="/home/groups/banane/htdocs/wwwcopy/Banane",
but when the working copy is placed on another web server, one may
need to alter the path information.




IMPORTANT ROUTINES

$BANANEPATH/Documentation/Scripts/.

./wwwupdate.scr: executes svn update of the Banane working copy at the
berlios web server and calls
$BANANEPATH/Documentation/Perl/updatemain.pl
and
$BANANEPATH/Documentation/Perl/updatetree.pl
to first update the database table of the routines and afterwards the
database table containing the directory tree information.

./wwwdocu_conf.scr: Script that returns the appropriate values of
local values, e.g. mySQL server and user. Also, this script returns
the path to the webserver. This is done via the echo
command to ensure that both PERL- and PHP-Scripts can use this
info. This script has to be modified when the documentation or
repository is moved to another server and it may be extended for other
"global" settings. 


$BANANEPATH/Documentation/Perl/.

./updatemain.pl: Main Perl script that uses the output of SVN update
to determine which routines have been changed. The headers of these
routines are parsed and the result is used to update the mySQL
database.

./parseupdate.pm: Perl module that contains the grammar and a function
to parse the output of SVN update, i.e. to determine paths and filenames of
routines that have been comitted since the last update.

./parseheader.pm: Perl module containing the grammar to parse the file
header. Returns the sections of the header as a hash that can be used
as input to the mySQL database.

./resetdb: Script to drop the database tables, define them anew and
populate them with the header information of every .m-file presently in the
working copy located at the bananepath. Executing this script may be
helpful when the database and working copy have become de-synchronized
by an error during normal operation.

./updatetree.pl: Perl script which reads the Banane directory structure and
updates the database table that is used to display the folders on the
web page

./get_leaf_dirs.pm Perl: module containing a recursive function that reads the
Banane directory structure and returns information about the directory
names and their parent folders. it is used by "updatetree.pl". It also
contains a list of directory names which are exluded from the
display. Presently, these are ".", "..", ".svn", "PHP", "Perl", and "Scripts"


$BANANEPATH/Documentation/PHP/.
All routines for the display of the web docu are located in this
directory. Furthermore, graphics needed are located in the Pics supdirectory.

bananestyle.css : file containing the style sheet info
                  for the banane online documentation. it is also
                  responsible for the positioning and size of the
                  various area elements of the page. it uses the file
                  ./Pics/frame.gif as the background

dyntree.php: PHP functions needed to display the banane directory
             tree. These routines have been adopted from the
             Easy PHP Tree script by Myiosoft. 

index.php : script that calls mainpage.php, copy index.php to the website's
            initial directory where the browser can find it.

mainpage.php : uses the layout with different areas as defined in
               bananestyle.css to fill these areas with dynamic content 
               as delivered by the viewfunctions

viewfunctions.php: collection of PHP functions that return strings
                   which are used by the mainpage to display the
                   website contents.

introfunction.php: a php function returning a string that contains the
                   general information shown when the website is
                   first displayed.




DATABASE
mySQL database banane, presently resides at db.berlios.de. Access the
database manually from the berlios shell server with
mysql -h db.berlios.de -u banane -p banane
Enter password: TIpKEPc26U

The database presnetly contains five tables:
routines, inputs, optinputs, outputs, and dirtreetable.
Tables may also be removed and re-initialized by the resetdb.pl
script, in case the database has become de-synchronized with the the
actual repository.


Primary table "routines" initialized with command
CREATE TABLE routines (name VARCHAR(128), aim VARCHAR(128),
description VARCHAR(1024), category VARCHAR(512), PRIMARY KEY(name));

Added other colums later:
ALTER TABLE routines ADD fullpath VARCHAR(128) AFTER name;
ALTER TABLE routines ADD version VARCHAR(128) AFTER fullpath;
ALTER TABLE routines ADD proc VARCHAR(512) AFTER restrictions;
etc...

mysql> describe routines;
+--------------+--------------+------+-----+---------+-------+
| Field        | Type         | Null | Key | Default | Extra |
+--------------+--------------+------+-----+---------+-------+
| name         | varchar(128) |      | PRI |         |       |
| fullpath     | varchar(128) | YES  |     | NULL    |       |
| relativepath | varchar(128) | YES  |     | NULL    |       |
| version      | varchar(128) | YES  |     | NULL    |       |
| author       | varchar(128) | YES  |     | NULL    |       |
| date         | varchar(128) | YES  |     | NULL    |       |
| aim          | varchar(128) | YES  |     | NULL    |       |
| description  | text         | YES  |     | NULL    |       |
| category     | text         | YES  |     | NULL    |       |
| syntax       | text         | YES  |     | NULL    |       |
| restrictions | text         | YES  |     | NULL    |       |
| proc         | text         | YES  |     | NULL    |       |
| also         | text         | YES  |     | NULL    |       |
| example      | text         | YES  |     | NULL    |       |
+--------------+--------------+------+-----+---------+-------+

Secondary table "inputs" initialized with
CREATE TABLE inputs (name VARCHAR(128), count TINYINT UNSIGNED, argument VARCHAR(128),description VARCHAR(1024));
Create tables optinputs and outputs analoguously.

Tables are connected via "name" that uniquely
identifies the routines (see below: that a problem, since classes may
contain routines with the same name). 
Multiple inputs to the same routine can be
inserted in the inputs table repeating the name of the routine.

"dirtreetable" contains the information about the banane directory
structure that is needed by dyntree.php to display the folders. this
table is dropped and populated anew by the Perl script
"updatetree.pl".



UPDATES
Regular (eg daily) update of the database with cronjob, since
post-commit script does not allow execution of arbitrary scripts, at
least not on the berlios server. 

Command to edit crontab: crontab -e. 

Call wwwupdate.scr with its full path info, since it cannot know the path.

Crontab for daily update at 17:34 looks like this

SHELL=/bin/bash
MAILTO=administrator's email adress if needed for checking
34 17 * * * /home/groups/banane/htdocs/wwwcopy/Banane/Documentation/Scripts/wwwupdate.scr




BACKUP OF THE REPOSITORY
Presently, a svn dump of the repository is generated automatically by
the berliso server at
http://svn.berlios.de/svndumps/banane-repos.gz
Do a local backup with a script like this:
cd ~/Backup/BerliOS
wget -b -o berliosbak.log http://svn.berlios.de/svndumps/banane-repos.gz
For a regular backup, call the script with a cronjob

Maybe use the FOR server?




HEADER ID 
The $Id:$ tag in the can be activated when a routine is first comitted
by the command:
  svn propset svn:keywords "Id" kwextract.m 




TO DO
- include possibility to delete a file. Action "D" in svn
update. Warning: "D" may work on whole directories with files
contained in them not mentioned explicitely! Evaluate actions in
updatemain via first entry of filenames. how are cases done in perl?  
- automatically mail commits to the blog? maybe too much info.
- header section "side effects" needed???
- make category section to choose from a set of possibilities
- add source to db and create script to show it.
- say something if parsing goes wrong, better error processing in
updatemain. 
- Are success variables in perl script suitable? what exactly do they do? avoid
warnings in resetdb
- possibly enable searching aims, or even the whole db?
- what happens in the database if two routines have the same name, 
  eg "display" routines for different classes? only first routine with
  that name appears on website. Perhaps introduce unique number in
  addition to routine name.


